{"ast":null,"code":"import _toConsumableArray from \"/Users/alexanderneumann/GeneralAssembly/Shopify-Front-End-Challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/alexanderneumann/GeneralAssembly/Shopify-Front-End-Challenge/src/components/Responses/Responses.jsx\";\n\nimport React, { useRef } from 'react';\nimport './Responses.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nvar Response = function Response(props) {\n  var dummy = useRef(); //console.log([...props.allValuesData].reverse())\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Response\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, _toConsumableArray(props.allValuesData).map(function (PromptandResponses, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ResponseCard\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }, props.usersPromptData.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      key: \"\".concat(props.usersPromptData),\n      className: \"HumanChatBubble fadeInBottom\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 29\n      }\n    }, PromptandResponses[0])), /*#__PURE__*/React.createElement(\"div\", {\n      key: \"\".concat(PromptandResponses, \"-\").concat(index),\n      className: \"AIChatBubble fadeInBottom\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }\n    }, PromptandResponses[1])));\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    ref: dummy,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }));\n};\n\ndummy.current.scrollIntoView({\n  behavior: 'smooth'\n});\nexport default Response;","map":{"version":3,"names":["React","useRef","CSSTransition","TransitionGroup","Response","props","dummy","allValuesData","map","PromptandResponses","index","usersPromptData","length","current","scrollIntoView","behavior"],"sources":["/Users/alexanderneumann/GeneralAssembly/Shopify-Front-End-Challenge/src/components/Responses/Responses.jsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport './Responses.css';\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\nconst Response = (props) => {\n    const dummy = useRef();\n\n    //console.log([...props.allValuesData].reverse())\n\n    return (\n        <div className=\"Response\">\n            {/* AN: We shouldn't mutate React state directly, so using the spread operator clones the prop */}\n            {/* {[...props.allValuesData].reverse().map((PromptandResponses, index) => ( */}\n\n            {[...props.allValuesData].map((PromptandResponses, index) => (\n                <div className=\"ResponseCard\">\n                    {props.usersPromptData.length > 0 &&\n                        <div key={`${props.usersPromptData}`} className=\"HumanChatBubble fadeInBottom\">\n                            {/* AN: I tried passing the Prompts and Responses as objects, but caused a headache, so arrays was the solution*/}\n                            <h3>{PromptandResponses[0]}</h3>\n                        </div>\n                    }\n                    <div key={`${PromptandResponses}-${index}`} className=\"AIChatBubble fadeInBottom\">\n                        {/* AN: I tried passing the Prompts and Responses as objects, but caused a headache, so arrays was the solution*/}\n                        {/*<h3>{PromptandResponses[0]} </h3>*/}\n                        <h3>{PromptandResponses[1]}</h3>\n                    </div>\n                </div>\n            ))\n            }\n            <span ref={dummy}></span>\n\n        </div >\n    )\n};\n\ndummy.current.scrollIntoView({ behavior: 'smooth' });\n\nexport default Response;"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAO,iBAAP;AACA,SACIC,aADJ,EAEIC,eAFJ,QAGO,wBAHP;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;EACxB,IAAMC,KAAK,GAAGL,MAAM,EAApB,CADwB,CAGxB;;EAEA,oBACI;IAAK,SAAS,EAAC,UAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAIK,mBAAII,KAAK,CAACE,aAAV,EAAyBC,GAAzB,CAA6B,UAACC,kBAAD,EAAqBC,KAArB;IAAA,oBAC1B;MAAK,SAAS,EAAC,cAAf;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACKL,KAAK,CAACM,eAAN,CAAsBC,MAAtB,GAA+B,CAA/B,iBACG;MAAK,GAAG,YAAKP,KAAK,CAACM,eAAX,CAAR;MAAsC,SAAS,EAAC,8BAAhD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAEI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAKF,kBAAkB,CAAC,CAAD,CAAvB,CAFJ,CAFR,eAOI;MAAK,GAAG,YAAKA,kBAAL,cAA2BC,KAA3B,CAAR;MAA4C,SAAS,EAAC,2BAAtD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAGI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAKD,kBAAkB,CAAC,CAAD,CAAvB,CAHJ,CAPJ,CAD0B;EAAA,CAA7B,CAJL,eAoBI;IAAM,GAAG,EAAEH,KAAX;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EApBJ,CADJ;AAyBH,CA9BD;;AAgCAA,KAAK,CAACO,OAAN,CAAcC,cAAd,CAA6B;EAAEC,QAAQ,EAAE;AAAZ,CAA7B;AAEA,eAAeX,QAAf"},"metadata":{},"sourceType":"module"}