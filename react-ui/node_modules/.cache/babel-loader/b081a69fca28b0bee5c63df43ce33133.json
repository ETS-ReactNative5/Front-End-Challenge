{"ast":null,"code":"import _toConsumableArray from \"/Users/alexanderneumann/GeneralAssembly/Shopify-Front-End-Challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/alexanderneumann/GeneralAssembly/Shopify-Front-End-Challenge/src/components/Form/Form.jsx\";\n\nimport React from 'react';\nimport { ReactComponent as FormSvg } from \"@svgr/webpack?-prettier,-svgo!../../send-02.svg\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport \"./Form.css\"; //Note that the API Key is hidden away for security\n\nvar OpenAPIKey = process.env.REACT_APP_OPENAI_API_KEY;\n\nvar Form = function Form(props) {\n  var handleSubmit = function handleSubmit(usersPromptData) {\n    props.setIsLoading(true);\n    console.log(usersPromptData.includes('Alexander Neumann'));\n    var datafromAPI = {\n      //AN: Passes in what the user types in the text field as with a template literal\n      prompt: \"\".concat(usersPromptData),\n      temperature: 1,\n      max_tokens: 200,\n      top_p: 1.0,\n      frequency_penalty: 0.0,\n      presence_penalty: 0.0\n    };\n    fetch(\"https://api.openai.com/v1/engines/text-curie-001/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(OpenAPIKey)\n      },\n      body: JSON.stringify(datafromAPI)\n    }).then(function (response) {\n      //AN: If there's any errors coming from the OpenAPI,\n      //this is where the code tells us the status code\n      if (!response.ok) {\n        throw new Error(\"HTTP status \" + response.status);\n      }\n\n      return response.json();\n    }).then(function (response) {\n      console.log(response.choices[0].text);\n      props.setIsLoading(false); //AN: This cleans up the start of the OpenAPI Response using Regular Expressions (Regex)\n\n      var aiResponse = response.choices[0].text.replace(/((^.)(^,)(^())\\r\\n)/gm, \"\");\n      aiResponse = aiResponse == \"\" ? \"I'm sorry Dave, I'm afraid I do that\" : aiResponse;\n      /*if (aiResponse === \"\") {\n          console.log('empty')\n          return aiResponse(\"I'm sorry Dave, I'm afraid I do that\")\n      }*/\n\n      props.updateValuesData(function (data) {\n        return [].concat(_toConsumableArray(data), [[\"\".concat(usersPromptData), \"\".concat(aiResponse)]]);\n      });\n      console.log(props.allValuesData); //const reversed = props.updateValuesData.reverse()\n      //console.log(reversed);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      event.target.reset();\n      handleSubmit(props.usersPromptData, props.updateValuesData, props.setIsLoading);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextareaAutosize, {\n    placeholder: \"Type a message...\",\n    onChange: function onChange(event) {\n      event.preventDefault();\n      props.updateUsersPrompt(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"Submit\",\n    type: \"submit\",\n    disabled: props.isLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormSvg, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 81\n    }\n  }))));\n};\n\nexport default Form;","map":{"version":3,"names":["React","TextareaAutosize","OpenAPIKey","process","env","REACT_APP_OPENAI_API_KEY","Form","props","handleSubmit","usersPromptData","setIsLoading","console","log","includes","datafromAPI","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","fetch","method","headers","Authorization","body","JSON","stringify","then","response","ok","Error","status","json","choices","text","aiResponse","replace","updateValuesData","data","allValuesData","event","preventDefault","target","reset","updateUsersPrompt","value","isLoading"],"sources":["/Users/alexanderneumann/GeneralAssembly/Shopify-Front-End-Challenge/src/components/Form/Form.jsx"],"sourcesContent":["import React from 'react';\nimport { ReactComponent as FormSvg } from '../../send-02.svg';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport \"./Form.css\";\n\n//Note that the API Key is hidden away for security\nconst OpenAPIKey = process.env.REACT_APP_OPENAI_API_KEY;\n\nconst Form = (props) => {\n\n    const handleSubmit = (usersPromptData) => {\n\n        props.setIsLoading(true);\n\n        console.log(usersPromptData.includes('Alexander Neumann'));\n\n        const datafromAPI = {\n            //AN: Passes in what the user types in the text field as with a template literal\n            prompt: `${usersPromptData}`,\n            temperature: 1,\n            max_tokens: 200,\n            top_p: 1.0,\n            frequency_penalty: 0.0,\n            presence_penalty: 0.0,\n        };\n\n        fetch(\"https://api.openai.com/v1/engines/text-curie-001/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${OpenAPIKey}`,\n            },\n            body: JSON.stringify(datafromAPI),\n        })\n            .then((response) => {\n\n                //AN: If there's any errors coming from the OpenAPI,\n                //this is where the code tells us the status code\n\n                if (!response.ok) {\n                    throw new Error(\"HTTP status \" + response.status);\n\n                }\n                return response.json();\n            })\n            .then((response) => {\n\n                console.log(response.choices[0].text)\n                props.setIsLoading(false)\n\n                //AN: This cleans up the start of the OpenAPI Response using Regular Expressions (Regex)\n\n                let aiResponse = response.choices[0].text.replace(\n                    /((^.)(^,)(^())\\r\\n)/gm,\n                    \"\"\n                );\n\n                aiResponse = aiResponse == \"\" ? \"I'm sorry Dave, I'm afraid I do that\" : aiResponse;\n                /*if (aiResponse === \"\") {\n                    console.log('empty')\n                    return aiResponse(\"I'm sorry Dave, I'm afraid I do that\")\n                }*/\n\n                props.updateValuesData(data => [...data, [`${usersPromptData}`, `${aiResponse}`]]);\n                console.log(props.allValuesData)\n\n                //const reversed = props.updateValuesData.reverse()\n                //console.log(reversed);\n            });\n\n    };\n\n    return (\n        <><form onSubmit={(event) => { event.preventDefault(); event.target.reset(); handleSubmit(props.usersPromptData, props.updateValuesData, props.setIsLoading) }}>\n            <TextareaAutosize placeholder=\"Type a message...\" onChange={(event) => { event.preventDefault(); props.updateUsersPrompt(event.target.value) }} />\n            <button className=\"Submit\" type=\"submit\" disabled={props.isLoading}><FormSvg /></button>\n        </form>\n        </>\n    );\n};\n\nexport default Form;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}